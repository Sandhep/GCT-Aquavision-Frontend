{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\React Projects\\\\Dashboard\\\\dashboard\\\\src\\\\components\\\\ControlledSwitches.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Switch from '@mui/material/Switch';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_URL = \"http://localhost:4000\";\nfunction ControlledSwitches() {\n  _s();\n  const [checked, setChecked] = React.useState(false);\n  const [state, setState] = React.useState('OFF');\n  const [captchaInput, setCaptchaInput] = React.useState('');\n  const [captchaValid, setCaptchaValid] = React.useState(false);\n  const expectedCaptcha = '12345';\n  const handleChange = event => {\n    const isChecked = event.target.checked;\n    if (captchaValid) {\n      setChecked(isChecked);\n      setState(isChecked ? 'ON' : 'OFF');\n      const data = {\n        isChecked: isChecked,\n        state: state\n      };\n      handleswitch(data);\n      if (!isChecked) {\n        setCaptchaValid(false);\n        setCaptchaInput('');\n      }\n    }\n  };\n  const handleCaptchaChange = event => {\n    setCaptchaInput(event.target.value);\n  };\n  const validateCaptcha = () => {\n    if (captchaInput === expectedCaptcha) {\n      setCaptchaValid(true);\n    } else {\n      setCaptchaValid(false);\n      alert('Invalid Password. Please try again.');\n    }\n  };\n  function handleswitch(data) {\n    fetch(`${SERVER_URL}/switch`, {\n      method: 'POST',\n      // Specify the method\n      headers: {\n        'Content-Type': 'application/json' // Specify the content type\n      },\n      body: JSON.stringify(data) // Convert the data to JSON string\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json(); // Parsing the JSON response\n    }).then(data => {\n      console.log(data); // Handle the data from the response\n    }).catch(error => {\n      console.error('There was a problem with the fetch operation:', error);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter Password to Turn ON\",\n      variant: \"outlined\",\n      value: captchaInput,\n      onChange: handleCaptchaChange,\n      disabled: captchaValid,\n      type: \"password\",\n      fullWidth: true,\n      margin: \"normal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: validateCaptcha,\n      disabled: captchaValid,\n      fullWidth: true,\n      sx: {\n        mb: 2\n      },\n      children: \"Validate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Switch, {\n        checked: checked,\n        onChange: handleChange,\n        color: \"warning\",\n        disabled: !captchaValid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this),\n      label: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(ControlledSwitches, \"Zqad3cXR6lohQ5PhpFzFRxKKj8I=\");\n_c = ControlledSwitches;\nexport default ControlledSwitches;\nvar _c;\n$RefreshReg$(_c, \"ControlledSwitches\");","map":{"version":3,"names":["React","Switch","FormControlLabel","TextField","Button","Box","axios","jsxDEV","_jsxDEV","SERVER_URL","ControlledSwitches","_s","checked","setChecked","useState","state","setState","captchaInput","setCaptchaInput","captchaValid","setCaptchaValid","expectedCaptcha","handleChange","event","isChecked","target","data","handleswitch","handleCaptchaChange","value","validateCaptcha","alert","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","console","log","catch","error","children","label","variant","onChange","disabled","type","fullWidth","margin","fileName","_jsxFileName","lineNumber","columnNumber","onClick","sx","mb","control","color","_c","$RefreshReg$"],"sources":["C:/Projects/React Projects/Dashboard/dashboard/src/components/ControlledSwitches.js"],"sourcesContent":["import React from 'react';\r\nimport Switch from '@mui/material/Switch';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Box from '@mui/material/Box';\r\nimport axios from \"axios\";\r\n\r\nconst SERVER_URL =\"http://localhost:4000\";\r\n\r\nfunction ControlledSwitches() {\r\n  const [checked, setChecked] = React.useState(false);\r\n  const [state, setState] = React.useState('OFF');\r\n  const [captchaInput, setCaptchaInput] = React.useState('');\r\n  const [captchaValid, setCaptchaValid] = React.useState(false);\r\n\r\n  const expectedCaptcha = '12345'; \r\n\r\n  const handleChange = (event) => {\r\n    const isChecked = event.target.checked;\r\n    if (captchaValid) {\r\n      setChecked(isChecked);\r\n      setState(isChecked ? 'ON' : 'OFF');\r\n      const data ={\r\n        isChecked:isChecked,\r\n        state:state\r\n      }\r\n      handleswitch(data);\r\n      if (!isChecked) {\r\n        setCaptchaValid(false);\r\n        setCaptchaInput('');\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleCaptchaChange = (event) => {\r\n    setCaptchaInput(event.target.value);\r\n  };\r\n\r\n  const validateCaptcha = () => {\r\n    if (captchaInput === expectedCaptcha) {\r\n      setCaptchaValid(true);\r\n    } else {\r\n      setCaptchaValid(false);\r\n      alert('Invalid Password. Please try again.');\r\n    }\r\n  };\r\n\r\n  function handleswitch(data){\r\n    fetch(`${SERVER_URL}/switch`, {\r\n      method: 'POST', // Specify the method\r\n      headers: {\r\n          'Content-Type': 'application/json' // Specify the content type\r\n      },\r\n      body: JSON.stringify(data) // Convert the data to JSON string\r\n  })\r\n      .then(response => {\r\n          if (!response.ok) {\r\n              throw new Error('Network response was not ok');\r\n          }\r\n          return response.json(); // Parsing the JSON response\r\n      })\r\n      .then(data => {\r\n          console.log(data); // Handle the data from the response\r\n      })\r\n      .catch(error => {\r\n          console.error('There was a problem with the fetch operation:', error);\r\n      });\r\n  }\r\n\r\n\r\n  return (\r\n    <Box>\r\n      <TextField\r\n        label=\"Enter Password to Turn ON\"\r\n        variant=\"outlined\"\r\n        value={captchaInput}\r\n        onChange={handleCaptchaChange}\r\n        disabled={captchaValid}\r\n        type=\"password\"\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={validateCaptcha}\r\n        disabled={captchaValid}\r\n        fullWidth\r\n        sx={{ mb: 2 }}\r\n      >\r\n        Validate\r\n      </Button>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={checked}\r\n            onChange={handleChange}\r\n            color=\"warning\"\r\n            disabled={!captchaValid}\r\n          />\r\n        }\r\n        label={state}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ControlledSwitches;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}