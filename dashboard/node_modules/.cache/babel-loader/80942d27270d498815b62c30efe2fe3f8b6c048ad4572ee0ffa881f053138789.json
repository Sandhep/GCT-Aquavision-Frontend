{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\React Projects\\\\Dashboard\\\\dashboard\\\\src\\\\components\\\\ControlledSwitches.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport Switch from '@mui/material/Switch';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ControlledSwitches() {\n  _s();\n  const [checked, setChecked] = React.useState(false);\n  const [state, setState] = React.useState(\"OFF\");\n  const [captchaInput, setCaptchaInput] = React.useState(\"\");\n  const [captchaValid, setCaptchaValid] = React.useState(false);\n  const expectedCaptcha = \"12345\"; // This is the CAPTCHA value that needs to be entered\n\n  const handleChange = event => {\n    if (captchaValid) {\n      const isChecked = event.target.checked;\n      setChecked(isChecked);\n      setState(isChecked ? \"ON\" : \"OFF\");\n    }\n  };\n  const handleCaptchaChange = event => {\n    setCaptchaInput(event.target.value);\n  };\n  const validateCaptcha = () => {\n    if (captchaInput === expectedCaptcha) {\n      setCaptchaValid(true);\n    } else {\n      setCaptchaValid(false);\n      alert(\"Invalid CAPTCHA. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter CAPTCHA\",\n      variant: \"outlined\",\n      value: captchaInput,\n      onChange: handleCaptchaChange,\n      disabled: captchaValid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: validateCaptcha,\n      disabled: captchaValid,\n      children: \"Validate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Switch, {\n        checked: checked,\n        onChange: handleChange,\n        color: \"warning\",\n        disabled: !captchaValid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this),\n      label: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(ControlledSwitches, \"2iUFur6xaNuIVaWPh8FYfoG0Kes=\");\n_c = ControlledSwitches;\nexport default ControlledSwitches;\nvar _c;\n$RefreshReg$(_c, \"ControlledSwitches\");","map":{"version":3,"names":["React","Switch","FormControlLabel","TextField","Button","jsxDEV","_jsxDEV","ControlledSwitches","_s","checked","setChecked","useState","state","setState","captchaInput","setCaptchaInput","captchaValid","setCaptchaValid","expectedCaptcha","handleChange","event","isChecked","target","handleCaptchaChange","value","validateCaptcha","alert","children","label","variant","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onClick","control","color","_c","$RefreshReg$"],"sources":["C:/Projects/React Projects/Dashboard/dashboard/src/components/ControlledSwitches.js"],"sourcesContent":["import * as React from 'react';\r\nimport Switch from '@mui/material/Switch';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\n\r\nfunction ControlledSwitches() {\r\n  const [checked, setChecked] = React.useState(false);\r\n  const [state, setState] = React.useState(\"OFF\");\r\n  const [captchaInput, setCaptchaInput] = React.useState(\"\");\r\n  const [captchaValid, setCaptchaValid] = React.useState(false);\r\n\r\n  const expectedCaptcha = \"12345\";  // This is the CAPTCHA value that needs to be entered\r\n\r\n  const handleChange = (event) => {\r\n    if (captchaValid) {\r\n      const isChecked = event.target.checked;\r\n      setChecked(isChecked);\r\n      setState(isChecked ? \"ON\" : \"OFF\");\r\n    }\r\n  };\r\n\r\n  const handleCaptchaChange = (event) => {\r\n    setCaptchaInput(event.target.value);\r\n  };\r\n\r\n  const validateCaptcha = () => {\r\n    if (captchaInput === expectedCaptcha) {\r\n      setCaptchaValid(true);\r\n    } else {\r\n      setCaptchaValid(false);\r\n      alert(\"Invalid CAPTCHA. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField \r\n        label=\"Enter CAPTCHA\" \r\n        variant=\"outlined\" \r\n        value={captchaInput} \r\n        onChange={handleCaptchaChange} \r\n        disabled={captchaValid}\r\n      />\r\n      <Button \r\n        variant=\"contained\" \r\n        onClick={validateCaptcha} \r\n        disabled={captchaValid}\r\n      >\r\n        Validate\r\n      </Button>\r\n      <FormControlLabel \r\n        control={\r\n          <Switch \r\n            checked={checked} \r\n            onChange={handleChange} \r\n            color=\"warning\" \r\n            disabled={!captchaValid}\r\n          />\r\n        } \r\n        label={state} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ControlledSwitches;\r\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,KAAK,CAACW,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,KAAK,CAACW,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGf,KAAK,CAACW,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGjB,KAAK,CAACW,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMO,eAAe,GAAG,OAAO,CAAC,CAAE;;EAElC,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC9B,IAAIJ,YAAY,EAAE;MAChB,MAAMK,SAAS,GAAGD,KAAK,CAACE,MAAM,CAACb,OAAO;MACtCC,UAAU,CAACW,SAAS,CAAC;MACrBR,QAAQ,CAACQ,SAAS,GAAG,IAAI,GAAG,KAAK,CAAC;IACpC;EACF,CAAC;EAED,MAAME,mBAAmB,GAAIH,KAAK,IAAK;IACrCL,eAAe,CAACK,KAAK,CAACE,MAAM,CAACE,KAAK,CAAC;EACrC,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIX,YAAY,KAAKI,eAAe,EAAE;MACpCD,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACLA,eAAe,CAAC,KAAK,CAAC;MACtBS,KAAK,CAAC,oCAAoC,CAAC;IAC7C;EACF,CAAC;EAED,oBACEpB,OAAA;IAAAqB,QAAA,gBACErB,OAAA,CAACH,SAAS;MACRyB,KAAK,EAAC,eAAe;MACrBC,OAAO,EAAC,UAAU;MAClBL,KAAK,EAAEV,YAAa;MACpBgB,QAAQ,EAAEP,mBAAoB;MAC9BQ,QAAQ,EAAEf;IAAa;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACF7B,OAAA,CAACF,MAAM;MACLyB,OAAO,EAAC,WAAW;MACnBO,OAAO,EAAEX,eAAgB;MACzBM,QAAQ,EAAEf,YAAa;MAAAW,QAAA,EACxB;IAED;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT7B,OAAA,CAACJ,gBAAgB;MACfmC,OAAO,eACL/B,OAAA,CAACL,MAAM;QACLQ,OAAO,EAAEA,OAAQ;QACjBqB,QAAQ,EAAEX,YAAa;QACvBmB,KAAK,EAAC,SAAS;QACfP,QAAQ,EAAE,CAACf;MAAa;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CACF;MACDP,KAAK,EAAEhB;IAAM;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC3B,EAAA,CA1DQD,kBAAkB;AAAAgC,EAAA,GAAlBhC,kBAAkB;AA4D3B,eAAeA,kBAAkB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}